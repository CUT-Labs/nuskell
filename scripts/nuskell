#!/usr/bin/env python

import os
import sys
import argparse
import pkg_resources

#'http://www.github.com/bad-ants-fleet/crnsimulator'
from crnsimulator import ReactionGraph

from nuskell import translate, verify, printCRN
from nuskell.parser import parse_crn_string, split_reversible_reactions
from nuskell.objects import TestTube, TestTubeIO 
from nuskell.enumeration import TestTubePeppercornIO
from nuskell.verifier import removeSpecies

def get_peppercorn_args(parser):
  """Selected arguments for the peppercorn interface. """
  parser.add_argument('--max-complex-size', default=100, type=int, dest='MAX_COMPLEX_SIZE', 
      metavar='<int>',
      help="Peppercorn: Maximum number of strands allowed in a complex" + \
          "(used to prevent polymerization)")
  parser.add_argument('--max-complex-count', default=1000, type=int, dest='MAX_COMPLEX_COUNT',
      metavar='<int>',
      help="Peppercorn: Maximum number of complexes that may be enumerated" + \
          "before the enumerator halts.")
  parser.add_argument('--max-reaction-count', default=10000, type=int, dest='MAX_REACTION_COUNT',
      metavar='<int>',
      help="Peppercorn: Maximum number of reactions that may be enumerated " + \
          "before the enumerator halts.")

  parser.add_argument('--reject-remote', action='store_true', dest='REJECT_REMOTE',
      help="Peppercorn: Discard remote toehold mediated 3-way and 4-way branch migration reactions.")
  parser.add_argument('--ignore-branch-3way', action='store_true',
      help="Peppercorn: Ignore 3-way branch migration events during enumeration.")
  parser.add_argument('--ignore-branch-4way', action='store_true',
      help="Peppercorn: Ignore 4-way branch migration events during enumeration.")

  # TODO: explain these options in more deatail!
  parser.add_argument('--release-cutoff-1-1', type=int, default=6, dest='RELEASE_CUTOFF_1_1',
      metavar='<int>',
      help="Peppercorn: Maximum number of bases that will be released spontaneously "+\
          "in a 1-1 `open` reaction" )
  parser.add_argument('--release-cutoff-1-n', type=int, default=6, dest='RELEASE_CUTOFF_1_N',
      metavar='<int>',
      help="Peppercorn: Maximum number of bases that will be released spontaneously " + \
          "in a 1-n `open` reaction.")
  parser.add_argument('--release-cutoff', type=int, default=None, dest='RELEASE_CUTOFF',
      metavar='<int>',
      help="Peppercorn: Maximum number of bases that will be released spontaneously " +\
          "in an `open` reaction, for either 1-1 or 1-n reactions (equivalent to setting " + \
          "--release-cutoff-1-1 and --release-cutoff-1-n to the same value)")

  parser.add_argument('--no-max-helix', action='store_true',
      help="Peppercorn: Don't apply 'max helix at a time' semantics to " +\
          "3-way branch migration reactions.")
  parser.add_argument('--legacy-unzip', action='store_true', dest='LEGACY_UNZIP',
      help="Peppercorn: Apply legacy 'UNZIP=True' behavior. Note: --legacy-unzip" + \
      "mode will have no effect, if max helix semantics are disabled (--no-max-helix)")

  # NOTE: Output formatting: this option is not directly passed on to peppercorn
  parser.add_argument('--enum-detailed', action='store_true',
      help="Peppercorn: Don't condense reactions into only resting complexes")

  # NOTE: The option --no-rates was removed, because peppercorn always computes
  # rates, but you may choose to ignore them for condensed reaction graphs. 
  # k-fast enables to prune the condensed network, leaving the default of 0 M/s, has
  # the same effect.

  parser.add_argument('--k-slow', default=0.0, type=float, metavar='<flt>',
      help="Unimolecular reactions slower than this rate will be discarded")

  parser.add_argument('--k-fast', default=0.0, type=float, metavar='<flt>',
      help="Unimolecular reactions slower than this rate will be marked as slow")

  return parser

def get_nuskell_args(parser) :
  """ A collection of arguments for Nuskell """

  # Options for the translation mode of Nuskell
  parser.add_argument("--ts", action = 'store', metavar='</path/to/file>',
      help="Specify path to the translation scheme")

  parser.add_argument("--readpil", action = 'store',
      help=argparse.SUPPRESS)
      #help="Read compiled CRN from pilfile. (As an alternative to --ts).")

  parser.add_argument("--pilfile", action = 'store_true',
      help="Print results in the *.pil file format.")

  parser.add_argument("--dnafile", action = 'store_true',
      help="Print results in the *.dna file format.")

  # Choose a verification method.
  parser.add_argument("--verify", nargs='+', default='', action = 'store', 
      metavar = '<str>', help="Specify verification methods: \
          (bisimulation, pathway, integrated, bisim-loop-search,\
          bisim-depth-first, bisim-whole-graph)") 

  parser.add_argument("--verify-timeout", type=int, default=30, metavar='<int>',
      help="Specify time [seconds] to wait for verification to complete.")

  parser.add_argument("--enumerate", action = 'store_true',
      help="Enumerate the implementation CRN.")

  parser.add_argument("--simulate", action = 'store_true',
      help=argparse.SUPPRESS)
      #help="Simulate the CRNs.")

  parser.add_argument("-u", "--concentration-unit", default='M', action = 'store', metavar='<str>',
      help=argparse.SUPPRESS)
      #help="Specify unit for simulator")

  parser.add_argument("-o", "--output", default='domainlevel', action = 'store', metavar='<str>',
      help="Specify name of output file")

  parser.add_argument("-v", "--verbose", action='count', default=0,
      help="Print more output (-vv for extra debugging information)")

  return parser

def main() :
  """ The Nuskell compiler.  
  
    - translate formal CRNs into domain-level strand displacement systems.
    - verify the equivalence between formal CRN and implementation CRN.

  Output:
    - Domain-level DSD circuits printed into .pil and/or .dna files
    - Verbose information to STDOUT
    - verification results
    - simulatior scripts
  """
  parser = argparse.ArgumentParser(
      formatter_class=argparse.ArgumentDefaultsHelpFormatter)
  parser = get_nuskell_args(parser)
  parser = get_peppercorn_args(parser)
  args = parser.parse_args()

  # ~~~~~~~~~~~~~~~~~~~
  # Argument processing
  # ~~~~~~~~~~~~~~~~~~~
  args.UNZIP = not args.no_max_helix
  pilfile = args.output + '_tl.pil' if args.pilfile else None
  dnafile = args.output + '_tl.dna' if args.dnafile else None

  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  # Parse and process input CRN 
  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  input_crn = sys.stdin.readlines()
  input_crn = "".join(input_crn)
  fcrn, fs, signals, fuels = parse_crn_string(input_crn) 

  if args.verbose:
    print "formal species: {}; signal species: {}; fuel species: {}".format(
        sorted(fs), sorted(signals), sorted(fuels))

  if not (set(fs) <= set(signals)):
    # If this is not caught here, it will assign fs as fuels...
    raise Warning('all formal species {} should also be signals {}'.format(
      fs, signals))

  # ~~~~~~~~~~~~~~~~~~~~~~~
  # Initialize the TestTube
  # ~~~~~~~~~~~~~~~~~~~~~~~
  if args.ts : # Translate CRN using a translation scheme
    print "\nTranslating..."
    assert fs == signals
    solution, constant_solution = translate(input_crn, args.ts, 
        verbose = (args.verbose > 1)) 
  elif args.readpil : # Parse implementation species from a PIL file
    print "Parsing PIL file..."
    solution = TestTube()
    TestTubeIO(solution).load_pil_kernel(args.readpil)
  else :
    # At some point Nuskell should choose translation schemes automatically, 
    # but we are not there yet ... use nuskellCMP for such things.
    print "Please specify a translation scheme, see option --ts. For example:"
    schemedir = pkg_resources.resource_filename('nuskell', 'schemes')
    print 'Schemes in:', schemedir
    for s in os.listdir(schemedir) :
      print " --ts {}".format(s) 
    raise SystemExit

  if args.verbose :
    print "Complexes in Solution: "
    for cplx in sorted(solution.complexes, key=lambda x : str(x)):
      print ' ', cplx.name, '=', cplx.kernel

  if dnafile:
    with open(dnafile, 'w') as dna:
      TestTubeIO(solution).write_dnafile(dna, signals=signals, 
          crn=fcrn, ts = args.ts if args.ts else None)
  if pilfile:
    with open(pilfile, 'w') as pil:
      TestTubeIO(solution).write_pil_kernel(pil, unit=args.concentration_unit, 
          crn=fcrn, ts = args.ts if args.ts else None)

  if pilfile or dnafile :
    print "Wrote file(s):",
    if pilfile: print pilfile,
    if dnafile: print dnafile,
    print

  # NOTE: if we already know names for signals and fuels, extract them,
  # otherwise they are defined as follows:
  # signals = species that correspond to formal species in the formal CRN
  # fuels   = all non-signal species that have concentration > 0 nM
  if fuels :
    fuels = solution.selected_complexes(fuels)
  else :
    fuels = solution.present_complexes(exclude=signals)
  signals = solution.selected_complexes(signals)

  #if fuels == []:
  #  raise ValueError('solution does not contain fuels')
  if signals == []:
    raise ValueError('solution does not contain signals')

  if args.verbose:
    print "formal species: {}; signal species: {}; fuel species: {}".format(
        sorted(fs), sorted(map(str, signals)), sorted(map(str, fuels)))

  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  # Prepare enumerated CRN and TestTube
  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  if args.verify or args.simulate or args.enumerate :
    print "\nEnumerating reaction pathways..."
    condensed = not args.enum_detailed
    solution.enumerate_reactions(args, condensed = condensed)

    if args.verbose > 1 : # print the enumerated CRN
      for r in solution.reactions:
        print r, "[{} {} - {}]".format(r.rate, r.rateunits, r.rtype)

    print "\nReplacing regular-expression complexes ..."
    interpret = solution.interpret_species(fs, prune=True)
    # NOTE: Some scheme use history domains within constant and intermediate
    # species, these will not get replaced.

    # Return the implementation CRN. ( = enumerated CRN without regex complexes)
    icrn = []
    for r in solution.reactions:
      if args.verbose:
        print r, "[{} {} - {}]".format(r.rate, r.rateunits, r.rtype)
      rxn = [map(str,r.reactants),map(str,r.products), [r.rate]]
      icrn.append(rxn)

    print "Enumerated system: {} species, {} reactions".format(len(solution.complexes), len(icrn))
    print "  - {} signal species".format(len([c for c in solution.complexes if c.name in interpret.keys()]))
    print "  - {} fuel species".format(len([c for c in solution.complexes if c.name in map(str, fuels)]))
    print "  - {} intermediate species".format(len([c for c in solution.complexes if c.name not in (interpret.keys() + map(str,fuels))]))
    print 'Number of distinct strands in the system:', len(solution.strands)
    print 'Length of all distinct strands in the system:', sum(sum(map(lambda d: d.length, s)) for s in solution.strands.values())

    if args.simulate or args.pilfile :
      # If you use translation schemes, or if you didn't specify concentrations in
      # the PIL file, then all non-signal species have 'infinite' concentration at
      # this point. The experimental concentrations can be set by printing a
      # pilfile, adjusting it, and loading it instead of the translation scheme.

      # Set *initial* concentration of fuels to 100 nM. 
      for f in fuels:
        if None in solution.get_complex_concentration(f):
          solution.set_complex_concentration(f, 100e-9, False)

      # Set *initial* concentraiton of signals to 0 nM.
      for f in solution.selected_complexes(names=interpret.keys()):
        if None in solution.get_complex_concentration(f):
          solution.set_complex_concentration(f, 0, False)

      # Set *initial* concentraiton of remaining species (intermediates) to 0 nM.
      for i in solution.complexes:
        if None in solution.get_complex_concentration(i):
          solution.set_complex_concentration(i, 0, False)

      if args.pilfile :
        pilfile = args.output + '_c0.pil' 
        with open(pilfile, 'w') as pil:
          TestTubeIO(solution).write_pil_kernel(pil, unit=args.concentration_unit,
              crn=fcrn, ts = args.ts if args.ts else None)

  # ~~~~~~~~~~~~~~~~~~~~~~~~~~
  # Verify equivalence of CRNs
  # ~~~~~~~~~~~~~~~~~~~~~~~~~~
  if args.verify :
    print "\nVerification using:", args.verify
    fcrn = split_reversible_reactions(fcrn)

    # NOTE: implicitly also removes rate constants
    vcrn = removeSpecies(icrn, map(str, fuels))
    if args.verbose :
      print "Verification CRN:"
      printCRN(vcrn, reversible = True, rates=False)

    if interpret and args.verbose :
      print "Partial interpretation:"
      for impl, formal in sorted(interpret.items()) :
        print "  {} => {}".format(impl, ', '.join([x for x in formal.elements()]))

    for meth in args.verify :
      v, i = verify(fcrn, vcrn, fs, interpret=interpret, method=meth,
          verbose=(args.verbose>1), timeout=args.verify_timeout)

      if i and args.verbose :
        if not v : i = i[0]
        print "Returned interpretation ['{}']:".format(meth)
        for impl, formal in sorted(i.items()) :
          print "  {} => {}".format(impl, ', '.join([x for x in formal.elements()]))

      if v is True:
        print " {}: CRNs are {} equivalent.".format(v, meth)
      elif v is False:
        print " {}: CRNs are not {} equivalent.".format(v, meth)
      elif v is None:
        print " {}: {} verification did not terminate within {} seconds.".format(v, 
            meth, args.verify_timeout)

  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  # Simulate CRNs in a TestTube
  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  if args.simulate :

    print "\nWriting executable simulator scripts: {}_fCRN.py {}_iCRN.py".format(
        args.output, args.output)

    # Change CRN format from [[r], [p], [None]], if needed and add rate 1 to every reaction.
    scrn = map(lambda rxn: rxn[:2] + (rxn[2] if rxn[2] != [None] else [1]), fcrn)

    # Simulate the formal CRN using crnsimulator
    CRG = ReactionGraph(scrn)
    fFile, _ = CRG.write_ODE_lib(sorted(CRG.species), filename = args.output+'_fCRN')

    if args.verbose :
      print 'Wrote formal CRN simulator:', fFile 
      print ' - execute with: python {}'.format(fFile)

    # Simulate the interpretation CRN using crnsimulator
    iFile, _ = solution.simulate_crn(args.output + '_iCRN', unit=args.concentration_unit)
    if args.verbose :
      print 'Wrote implementation CRN simulator:', iFile
      print ' - execute with: python {}'.format(iFile)

if __name__ == '__main__':
  main()

